# 开发环境配置经验

1. 在开始新项目之前，需要确保以下基础环境已经安装：
   - Homebrew（macOS 包管理器）
   - Node.js 和 npm
   - React Native CLI

2. 如果遇到网络问题无法访问 githubusercontent.com：
   - 检查网络连接
   - 考虑使用代理或 VPN
   - 提供手动安装的替代方案给用户

3. 在遇到环境问题时，应该：
   - 清晰地告知用户需要安装的内容
   - 提供详细的安装步骤
   - 等待用户完成环境配置后再继续

# 环境检查规则

在开始新项目之前，应该先检查以下环境是否已安装：
1. Node.js 和 npm
2. 包管理器（如 Homebrew）
3. 网络连接状态

如果环境不完整，应该先指导用户完成环境配置，再进行后续开发工作。

# Cursor Rules

## 图片处理规则

1. 使用可靠的图片托管服务（如 Unsplash）而不是第三方网站的图片，避免跨域和防盗链问题
2. 为图片URL添加优化参数：
   - `w=xxx`: 限制图片宽度
   - `q=80`: 设置适中的图片质量
   - `auto=format`: 自动选择最佳格式
   - `fit=crop`: 确保图片正确填充容器
3. 在使用第三方图片时，应当测试图片的可访问性
4. 为图片添加错误处理和占位图

# 菜单应用开发遇到的问题和解决方案

## 2023-04-02

### 问题1：页面显示空白

**问题描述**：
Vue 应用启动后，页面显示空白，没有任何内容。

**诊断过程**：
1. 检查控制台是否有错误提示
2. 检查路由配置是否正确
3. 检查 store 中是否有必要的数据
4. 检查组件是否正确引用了 store 中的数据

**解决方案**：
1. 更新 store 文件，添加必要的数据结构（meatDishes 和 vegDishes）
2. 确保组件中使用的数据与 store 中定义的数据匹配
3. 解决重复的 Tabbar 问题，只在 App.vue 中保留一个 Tabbar

### 问题2：运行项目时路径问题

**问题描述**：
运行 `npm run dev` 时找不到 package.json 文件。

**解决方案**：
确认项目结构，直接在正确的目录下运行命令（不需要 cd menu）。

### 问题3：页面内容空白

**问题描述**：
"吃什么"页面虽然显示了标题，但内容区域显示"暂无推荐"。

**诊断过程**：
1. 添加调试日志，查看 store 中的数据是否正确加载
2. 检查图片 URL 是否可以正常访问
3. 检查组件生命周期过程中可能出现的错误
4. 添加错误处理机制，确保即使出错也能显示降级内容

**解决方案**：
1. 在 store 文件中添加详细的调试日志，使用 localStorage 存储日志信息
2. 更换图片源为 Vant 官方的示例图片，确保图片可以正常加载
3. 添加错误处理，在图片加载失败时显示错误图标
4. 为组件添加错误捕获功能，在出错时显示友好的错误提示
5. 增强组件的健壮性，即使某些数据不存在也能正常显示

### 功能实现要点

1. **组件数据一致性**：
   - 确保所有组件使用统一的数据源（Pinia store）
   - 在修改数据时注意同步更新

2. **路由配置**：
   - 设置默认重定向到主页
   - 确保所有路由都对应到正确的组件

3. **用户界面**：
   - 只在 App.vue 中使用一个 Tabbar
   - 使用 van-nav-bar 作为页面标题
   - 确保内容区域有足够的 padding-bottom（避免被 Tabbar 遮挡） 

### 经验教训

1. **数据初始化问题**：
   - 在组件挂载时，应该验证数据是否存在，避免使用未定义的数据
   - 添加适当的错误处理和降级显示

2. **图片资源问题**：
   - 避免使用不稳定的第三方图片源，优先使用官方示例图片或本地图片
   - 为图片添加加载失败的处理机制
   - 使用 Vant 的 `van-image` 组件的错误处理功能

3. **调试方法**：
   - 使用 console.log 记录关键流程
   - 使用 localStorage 存储调试信息，方便在生产环境排查问题
   - 添加详细的错误信息，帮助定位问题 